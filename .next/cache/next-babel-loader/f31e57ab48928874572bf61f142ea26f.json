{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { composedWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport data from './data/data.json'; //initial state\n\nconst startState = {\n  cards: []\n}; //Actions\n\nexport const initialCards = () => {\n  return {\n    type: 'INITIALCARDS',\n    cards: data\n  };\n};\nexport const addItem = item => {\n  return {\n    type: 'ADD',\n    item\n  };\n}; //reducers\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INITIALCARDS':\n      return {\n        cards: action.cards\n      };\n\n    case 'ADD':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        cards: [...state.cards, action.item]\n      });\n  }\n}; //create store\n\nexport const initStore = (initialState = startState) => {\n  return createStore(reducer, initialState, composeWithDevTools(applyMiddleware(thunkMiddleware)));\n};","map":{"version":3,"sources":["D:/Cursos-extraSkills/nextJs/SSR/store.js"],"names":["createStore","applyMiddleware","composedWithDevTools","thunkMiddleware","data","startState","cards","initialCards","type","addItem","item","reducer","state","initialState","action","initStore","composeWithDevTools"],"mappings":";;;;;;AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,SAAQC,oBAAR,QAAmC,0BAAnC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,IAAP,MAAiB,kBAAjB,C,CAEA;;AACA,MAAMC,UAAU,GAAG;AACfC,EAAAA,KAAK,EAAE;AADQ,CAAnB,C,CAIA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC9B,SAAM;AACFC,IAAAA,IAAI,EAAE,cADJ;AAEFF,IAAAA,KAAK,EAAEF;AAFL,GAAN;AAIH,CALM;AAOP,OAAO,MAAMK,OAAO,GAAIC,IAAD,IAAU;AAC7B,SAAM;AACFF,IAAAA,IAAI,EAAE,KADJ;AAEFE,IAAAA;AAFE,GAAN;AAIH,CALM,C,CAOP;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGC,YAAT,EAAwBC,MAAxB,KAAkC;AACrD,UAAQA,MAAM,CAACN,IAAf;AACI,SAAK,cAAL;AACI,aAAO;AACHF,QAAAA,KAAK,EAAEQ,MAAM,CAACR;AADX,OAAP;;AAGJ,SAAK,KAAL;AACI,6CACOM,KADP;AAEIN,QAAAA,KAAK,EAAE,CAAC,GAAGM,KAAK,CAACN,KAAV,EAAiBQ,MAAM,CAACJ,IAAxB;AAFX;AANR;AAWH,CAZM,C,CAaP;;AACA,OAAO,MAAMK,SAAS,GAAG,CAACF,YAAY,GAAGR,UAAhB,KAA+B;AACpD,SAAOL,WAAW,CAACW,OAAD,EAAUE,YAAV,EAAwBG,mBAAmB,CACxDf,eAAe,CAACE,eAAD,CADyC,CAA3C,CAAlB;AAEH,CAHM","sourcesContent":["import {createStore, applyMiddleware} from 'redux';\r\nimport {composedWithDevTools} from 'redux-devtools-extension';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport data from './data/data.json'\r\n\r\n//initial state\r\nconst startState = {\r\n    cards: []\r\n}\r\n\r\n//Actions\r\nexport const initialCards = () => {\r\n    return{\r\n        type: 'INITIALCARDS',\r\n        cards: data\r\n    }\r\n}\r\n\r\nexport const addItem = (item) => {\r\n    return{\r\n        type: 'ADD',\r\n        item\r\n    }\r\n}\r\n\r\n//reducers\r\nexport const reducer = (state = initialState,  action) =>{\r\n    switch (action.type) {\r\n        case 'INITIALCARDS':\r\n            return {\r\n                cards: action.cards\r\n            }\r\n        case 'ADD':\r\n            return{\r\n                ...state,\r\n                cards: [...state.cards, action.item]\r\n            }\r\n    }\r\n}\r\n//create store\r\nexport const initStore = (initialState = startState) => {\r\n    return createStore(reducer, initialState, composeWithDevTools\r\n        (applyMiddleware(thunkMiddleware)));\r\n}"]},"metadata":{},"sourceType":"module"}